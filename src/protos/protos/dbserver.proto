syntax = "proto3";

package dbserver;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

/* ----- DATA DEFINITION ----- */


/* ----- Request RELEATED DEFINITION ----- */
enum AppTables {
    USER = 0;
    ARTICLE = 1;
    USER_READ = 2;
    BE_READ=3;
}

enum DBShard {
    ONE = 0;
    TWO = 1;
}

message InitServerRequest {
    DBShard shard = 1;
}

message BulkLoadRequest {
    AppTables table = 1;
}

message BulkLoadResponse {
    bool result = 1;
}

message ExecSqlBatchRequest {
    string sql = 1;
    uint64 batch_size = 2;
}

message ExecSqlFirstResponse {
    optional google.protobuf.BytesValue row = 1;
}

service DbServer {
    // Pings the server.
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Init the server.
    rpc Init(InitServerRequest) returns (google.protobuf.Empty);

    // Bulk load data
    rpc BulkLoad(BulkLoadRequest) returns (BulkLoadResponse);

    // Execute the specified sql and return the rows in stream
    // Useful when large or known size of returned rows
    rpc StreamExecSql(google.protobuf.StringValue) returns (stream google.protobuf.BytesValue);

    // Execute the specified sql and return the rows
    rpc ExecSql(google.protobuf.StringValue) returns (google.protobuf.BytesValue);

    // Execute the specified sql and return the rows in batch stream
    // Useful when bottleneck is network when using StreamExecSql
    rpc ExecSqlBatch(ExecSqlBatchRequest) returns (stream google.protobuf.BytesValue);

    // Execute the specified sql and return the first rows
    rpc ExecSqlFirst(google.protobuf.StringValue) returns (ExecSqlFirstResponse);

    // execute a sql statement without any return value
    // typically used for insert or update
    rpc ExecSqlDrop(google.protobuf.StringValue) returns (google.protobuf.Empty);
}
